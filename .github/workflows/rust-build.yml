name: Build and Release

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          override: true
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check Rust formatting
        run: cargo fmt -- --check

      - name: Check Rust with Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test

      - name: Install NSIS
        id: nsis
        uses: negrutiu/nsis-install@v2

      - name: Run build script
        shell: powershell
        run: .\build-resources\scripts\build.ps1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: owl-control-windows-x64
          path: |
            dist/OWL Control.exe
            dist/OWL-Control-Setup-*.exe

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: |
          echo "=== All artifacts ==="
          ls -la artifacts/
          echo "=== Contents of each artifact ==="
          find artifacts -type f -name "*.exe" -o -name "*.zip" | head -20

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/OWL-Control-Setup-*.exe
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
